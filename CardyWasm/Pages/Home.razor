@page "/"
@inject AlertService AlertService
@using System.Globalization
@using System.Text.Json

<PageTitle>Card</PageTitle>

<h1>Card Creator</h1>

<MudStack Style="height: 500px">
    <MudFileUpload T="IReadOnlyList<IBrowserFile>" Accept=".json" FilesChanged="UploadTemplate" MaximumFileCount="1">
        <ActivatorContent>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.CloudUpload">
                Upload Template
            </MudButton>
        </ActivatorContent>
    </MudFileUpload>
    <MudFileUpload T="IReadOnlyList<IBrowserFile>" 
            Accept=".csv" 
            FilesChanged="UploadCsvFile" 
            MaximumFileCount="1"
            Disabled="_templateNotUploaded"
            >
        <ActivatorContent>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.CloudUpload">
                Upload CSV
            </MudButton>
        </ActivatorContent>
    </MudFileUpload>
    
    @if (_shouldRender)
    {
        <MudGrid Spacing="20" Justify="Justify.Center">
            @foreach (var card in _cardList)
            {
                <MudItem lg="4">
                    <CardDisplay CardModel="@card"/>
                </MudItem>
            }
        </MudGrid>
    }
</MudStack>

@code {
    [Inject] 
    private IJSRuntime? Js { get; set; }
    private bool _shouldRender;
    private bool _templateNotUploaded = true;
    
    private IReadOnlyList<CardModel> _cardList = [];
    
    private CardTemplate? _myTemplate = new();
    
    private async Task UploadCsvFile(IReadOnlyList<IBrowserFile>? files)
    {
        if (files is null)
        {
            return;
        }
        
        foreach (var file in files)
        {
            await using var stream = file.OpenReadStream(file.Size);
            using var reader = new StreamReader(stream);
            using var csv = new CsvReader(reader, CultureInfo.InvariantCulture);
            
            var records = csv.GetRecordsAsync<CSVModel>();
            var newList = new List<CardModel>();
                
            await foreach (var record in records)
            {
                newList.Add(new CardModel(record));
            }

            _cardList = newList;
        }
        _shouldRender = true;
    }
    
    private async Task UploadTemplate(IReadOnlyList<IBrowserFile>? files)
    {
        if (files is null)
        {
            return;
        }
        
        foreach (var file in files)
        {
            await using var stream = file.OpenReadStream(file.Size);
            using var reader = new StreamReader(stream);
            
            var fileContent = await reader.ReadToEndAsync();
            
            try
            {
                _myTemplate = JsonSerializer.Deserialize<CardTemplate>(fileContent);
                _templateNotUploaded = false;
            }
            catch (JsonException ex)
            { 
                await AlertService.ShowAlert($"JSON parsing failed: {ex.Message}");
            }
        }
    }
}